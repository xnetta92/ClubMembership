// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ClubMembershipGraphics;
//
//    var members = Members.FromJson(jsonString);

namespace ClubMembershipGraphics
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Members
    {
        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("id")]
        public long MemberId { get; set; }

        [JsonProperty("Entry", NullValueHandling = NullValueHandling.Ignore)]
        public string Entry { get; set; }

        [JsonProperty("Rating", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rating { get; set; }

        [JsonProperty("Fullname", NullValueHandling = NullValueHandling.Ignore)]
        public string Fullname { get; set; }

        [JsonProperty("Interest", NullValueHandling = NullValueHandling.Ignore)]
        public Interest? Interest { get; set; }

        [JsonProperty("entry", NullValueHandling = NullValueHandling.Ignore)]
        public string MemberEntry { get; set; }

        [JsonProperty("rating", NullValueHandling = NullValueHandling.Ignore)]
        public long? MemberRating { get; set; }

        [JsonProperty("fullname", NullValueHandling = NullValueHandling.Ignore)]
        public string MemberFullname { get; set; }

        [JsonProperty("interest", NullValueHandling = NullValueHandling.Ignore)]
        public Interest? MemberInterest { get; set; }
    }

    public enum Interest { Parkour, Rafting, RollerSkating, Skateboarding, Skydiving };

    public partial class Members
    {
        public static Members[] FromJson(string json) => JsonConvert.DeserializeObject<Members[]>(json, ClubMembershipGraphics.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Members[] self) => JsonConvert.SerializeObject(self, ClubMembershipGraphics.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                InterestConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class InterestConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Interest) || t == typeof(Interest?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Parkour":
                    return Interest.Parkour;
                case "Rafting":
                    return Interest.Rafting;
                case "Roller skating":
                    return Interest.RollerSkating;
                case "Skateboarding":
                    return Interest.Skateboarding;
                case "Skydiving":
                    return Interest.Skydiving;
            }
            throw new Exception("Cannot unmarshal type Interest");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Interest)untypedValue;
            switch (value)
            {
                case Interest.Parkour:
                    serializer.Serialize(writer, "Parkour");
                    return;
                case Interest.Rafting:
                    serializer.Serialize(writer, "Rafting");
                    return;
                case Interest.RollerSkating:
                    serializer.Serialize(writer, "Roller skating");
                    return;
                case Interest.Skateboarding:
                    serializer.Serialize(writer, "Skateboarding");
                    return;
                case Interest.Skydiving:
                    serializer.Serialize(writer, "Skydiving");
                    return;
            }
            throw new Exception("Cannot marshal type Interest");
        }

        public static readonly InterestConverter Singleton = new InterestConverter();
    }
}
